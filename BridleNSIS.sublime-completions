{
        "scope": "source.nsis.bridle",

        "completions":
        [
                { "#": "BridleNSIS" },
                { "trigger": "f:Abort()", "contents": "Abort(\"${1:user_message}\")" },
                { "trigger": "f:BringToFront()", "contents": "BringToFront()" },
                { "trigger": "f:Call()", "contents": "Call(\"${1:name}\")" },
                { "trigger": "f:CallInstDLL()", "contents": "CallInstDLL(\"${1:dll_file}\", \"${2:function_name}\"" },
                { "trigger": "f:ClearErrors()", "contents": "ClearErrors()" },
                { "trigger": "f:CreateDirectory()", "contents": "CreateDirectory(\"${1:path_to_create}\")" },
                { "trigger": "f:CreateFont()", "contents": "CreateFont(\"${1:face_name}\",${2: \"${3:height}\"${4:, \"${5:weight}\"${6:, ${7:/ITALIC}${8:, ${9:/UNDERLINE}${10:, ${11:/STRIKE}}}}}})" },
                { "trigger": "f:CreateShortCut()", "contents": "CreateShortCut(\"${1:link}.lnk\", \"${2:target_file}\"${3:, \"${4:parameters}\"${5:, \"${6:icon_file}\"${7:, ${8:icon_index_number}${9:, ${10:start_options}${11:, ${12:keyboard_shortcut}${13:, \"${14:description}\"}}}}}}})" },
                { "trigger": "f:DeleteINISec()", "contents": "DeleteINISec(\"${1:ini_filename}\", \"${2:section_name}\")" },
                { "trigger": "f:DeleteINIStr()", "contents": "DeleteINIStr(\"${1:ini_filename}\", \"${2:section_name}\", \"${3:str_name}\")" },
                { "trigger": "f:DeleteRegValue()", "contents": "DeleteRegValue(\"${1:root_key}\", \"${2:subkey}\", \"${3:key_name}\")" },
                { "trigger": "f:DetailPrint()", "contents": "DetailPrint(\"${1:user_message}\")" },
                { "trigger": "f:Do Until..Loop", "contents": "Do Until ${1:condition}\n\t${4:# your code here}\nLoop" },
                { "trigger": "f:Do While..Loop", "contents": "Do While ${1:condition}\n\t${4:# your code here}\nLoop" },
                { "trigger": "f:EnableWindow()", "contents": "EnableWindow(${1:hwnd}, ${2:value})" },
                { "trigger": "f:EnumRegKey()", "contents": "EnumRegKey(\"${1:root_key}\", \"${2:subkey}\", \"${3:index}\")" },
                { "trigger": "f:EnumRegValue()", "contents": "EnumRegValue(\"${1:root_key}\", \"${2:subkey}\", \"${3:index}\")" },
                { "trigger": "f:Exec()", "contents": "Exec(\"${1:command}\")" },
                { "trigger": "f:ExecShell()", "contents": "ExecShell(\"${1:action}\", \"${2:command}\"${3:, ${4:parameter}})" },
                { "trigger": "f:ExecWait()", "contents": "ExecWait(\"${1:command}\")" },
                { "trigger": "f:ExpandEnvStrings()", "contents": "ExpandEnvStrings(\"${1:string}\")" },
                { "trigger": "f:Delete()", "contents": "Delete(\"${1:source}\", ${2:rebootok})" },
                { "trigger": "f:FileClose()", "contents": "FileClose(${1:handle})" },
                { "trigger": "f:FileCopy()", "contents": "FileCopy(\"${1:file}\", \"${2:target}\")" },
                { "trigger": "f:FileOpen()", "contents": "FileOpen(\"${1:filename}\", ${2:open_mode})" },
                { "trigger": "f:FileRead()", "contents": "FileRead(${1:handle}, ${2:maxlen})" },
                { "trigger": "f:FileReadByte()", "contents": "FileReadByte(${1:handle}, ${2:maxlen})" },
                { "trigger": "f:FileReadUTF16LE()", "contents": "FileReadUTF16LE(${1:handle}, ${2:maxlen})" },
                { "trigger": "f:FileReadWord()", "contents": "FileReadWord(${1:handle}, ${2:maxlen})" },
                { "trigger": "f:FileSeek()", "contents": "FileSeek(${1:handle}, ${2:offset}${3:, ${4:mode}${5:, ${6:user_var}}})" },
                { "trigger": "f:FileWrite()", "contents": "FileWrite(${1:handle})" },
                { "trigger": "f:FileWriteByte()", "contents": "FileWriteByte(${1:handle}, \"${2:string}\")" },
                { "trigger": "f:FileWriteUTF16LE()", "contents": "FileWriteUTF16LE(${1:handle}, \"${2:string}\")" },
                { "trigger": "f:FileWriteWord()", "contents": "FileWriteWord(${1:handle}, \"${2:string}\")" },
                { "trigger": "f:FindClose()", "contents": "FindClose(${1:handle})" },
                { "trigger": "f:FindNext()", "contents": "FindNext(${1:handle})" },
                { "trigger": "f:FindWindow()", "contents": "FindWindow(\"${1:windowclass}\", \"${2:windowtitle}\"${3:, ${4:windowparent}${5:, ${6:childafter}}})" },
                { "trigger": "f:FlushINI()", "contents": "FlushINI(\"${1:ini_filename}\")" },
                { "trigger": "f:Function()", "contents": "Function ${1:function_name}(${2:parameters})\n\t${5:# your code here}\nFunctionEnd" },
                { "trigger": "f:GetCurInstType()", "contents": "GetCurInstType()" },
                { "trigger": "f:GetCurrentAddress()", "contents": "GetCurrentAddress()" },
                { "trigger": "f:GetCurrentAddress()", "contents": "GetCurrentAddress(\"${1:function_name}\")" },
                { "trigger": "f:GetDlgItem()", "contents": "GetDlgItem(${1:dialog}, ${2:item_id})" },
                { "trigger": "f:GetErrorLevel()", "contents": "GetErrorLevel()" },
                { "trigger": "f:GetInstDirError()", "contents": "GetInstDirError()" },
                { "trigger": "f:GetLabelAddress()", "contents": "GetLabelAddress(\"${1:label}\")" },
                { "trigger": "f:GetTempFileName()", "contents": "GetTempFileName(${1:\\$${2:base_dir}})" },
                { "trigger": "f:Goto()", "contents": "Goto(${1:name})" },
                { "trigger": "f:HideWindow()", "contents": "HideWindow()" },
                { "trigger": "f:If Not", "contents": "If Not ${1:condition}\n\t${4:# your code here}\nEndIf" },
                { "trigger": "f:If Not..Else", "contents": "If Not ${1:condition}\n\t${4:# your code here}\nElse\n\t${5:# your code here}\nEndIf" },
                { "trigger": "f:If Not..ElseIf", "contents": "If Not ${1:condition}\n\t${4:# your code here}\nElseIf\n\t${5:# your code here}\nEndIf" },
                { "trigger": "f:If", "contents": "If ${1:condition}\n\t${4:# your code here}\nEndIf" },
                { "trigger": "f:If..Else", "contents": "If ${1:condition}\n\t${4:# your code here}\nElse\n\t${5:# your code here}\nEndIf" },
                { "trigger": "f:If..ElseIf", "contents": "If ${1:condition}\n\t${4:# your code here}\nElseIf\n\t${5:# your code here}\nEndIf" },
                { "trigger": "f:InitPluginsDir()", "contents": "InitPluginsDir()" },
                { "trigger": "f:InstTypeGetText()", "contents": "InstTypeGetText(${1:inst_type_idx})" },
                { "trigger": "f:InstTypeSetText()", "contents": "InstTypeSetText(${1:inst_type_idx}, \"${2:text}\")" },
                { "trigger": "f:IntFmt()", "contents": "IntFmt(${1:format}, ${2:numberstring})" },
                { "trigger": "f:IntOp()", "contents": "IntOp(${1:value1}, ${2:op}, ${3:value2})" },
                { "trigger": "f:LangString()", "contents": "LangString(${1:name}, \\$\\{LANG_${2:language_id}\\}, \"${3:string}\")" },
                { "trigger": "f:LicenseLangString()", "contents": "LicenseLangString(${1:name}, \\$\\{LANG_${2:language_id}\\}, \"${3:license_path}\")" },
                { "trigger": "f:LoadLanguageFile()", "contents": "LoadLanguageFile(\"${1:language_file_nlf}\")" },
                { "trigger": "f:LockWindow()", "contents": "LockWindow(${1:value})" },
                { "trigger": "f:LockWindow(off)", "contents": "LockWindow(off)" },
                { "trigger": "f:LockWindow(on)", "contents": "LockWindow(on)" },
                { "trigger": "f:LogSet()", "contents": "LogSet(${1:value})" },
                { "trigger": "f:LogSet(off)", "contents": "LogSet(off)" },
                { "trigger": "f:LogSet(on)", "contents": "LogSet(on)" },
                { "trigger": "f:LogText()", "contents": "LogText(\"${1:text}\")" },
                { "trigger": "f:MsgBox()", "contents": "MsgBox(\"${1:buttons}\", \"${2:message}\"${3:, ${4:options}${5:, ${6:sd}}})" },
                { "trigger": "f:MsgBox(ABORTRETRYIGNORE)", "contents": "MsgBox(\"ABORTRETRYIGNORE\", \"${1:message}\"${2:, ${3:options}${4:, ${5:sd}}})" },
                { "trigger": "f:MsgBox(OK)", "contents": "MsgBox(\"OK\", \"${1:message}\"${2:, ${3:options}${4:, ${5:sd}}})" },
                { "trigger": "f:MsgBox(OKCANCEL)", "contents": "MsgBox(\"OKCANCEL\", \"${1:message}\"${2:, ${3:options}${4:, ${5:sd}}})" },
                { "trigger": "f:MsgBox(RETRYCANCEL)", "contents": "MsgBox(\"RETRYCANCEL\", \"${1:message}\"${2:, ${3:options}${4:, ${5:sd}}})" },
                { "trigger": "f:MsgBox(YESNO)", "contents": "MsgBox(\"YESNO\", \"${1:message}\"${2:, ${3:options}${4:, ${5:sd}}})" },
                { "trigger": "f:MsgBox(YESNOCANCEL)", "contents": "MsgBox(\"YESNOCANCEL\", \"${1:message}\"${2:, ${3:options}${4:, ${5:sd}}})" },
                { "trigger": "f:Quit()", "contents": "Quit()" },
                { "trigger": "f:ReadEnvStr()", "contents": "ReadEnvStr(${1:name})" },
                { "trigger": "f:ReadINIStr()", "contents": "ReadINIStr(\"${1:ini_filename}\", \"${2:section_name}\", \"${3:entry_name}\")" },
                { "trigger": "f:ReadRegDWORD()", "contents": "ReadRegDWORD(\"${1:root_key}\", \"${2:sub_key}\", \"${3:name}\")" },
                { "trigger": "f:ReadRegStr()", "contents": "ReadRegStr(\"${1:root_key}\", \"${2:sub_key}\", \"${3:name}\")" },
                { "trigger": "f:Reboot()", "contents": "Reboot()" },
                { "trigger": "f:RegDLL()", "contents": "RegDLL(\"${1:dllfile}\", ${2:entrypoint_name})" },
                { "trigger": "f:SearchPath()", "contents": "SearchPath(\"${1:filename}\")" },
                { "trigger": "f:SectionGetFlags()", "contents": "SectionGetFlags(${1:section_index})" },
                { "trigger": "f:SectionGetInstTypes()", "contents": "SectionGetInstTypes(${1:section_index})" },
                { "trigger": "f:SectionGetSize()", "contents": "SectionGetSize(${1:section_index})" },
                { "trigger": "f:SectionSetFlags()", "contents": "SectionSetFlags(${1:section_index}, ${2:inst_types})" },
                { "trigger": "f:SectionSetInstTypes()", "contents": "SectionSetInstTypes(${1:section_index}, ${2:section_flags})" },
                { "trigger": "f:SectionSetSize()", "contents": "SectionSetSize(${1:handle}, ${2:maxlen})" },
                { "trigger": "f:SectionSetText()", "contents": "SectionSetText(${1:section_index}, \"${2:section_text}\")" },
                { "trigger": "f:SendMessage()", "contents": "SendMessage(${1:hwnd}, ${2:msg}, ${3:wparam}, ${4:lparam}${5:, ${6:timeout_in_ms}})" },
                { "trigger": "f:SetAutoClose()", "contents": "SetAutoClose(${1:value})" },
                { "trigger": "f:SetAutoClose(false)", "contents": "SetAutoClose(false)" },
                { "trigger": "f:SetAutoClose(true)", "contents": "SetAutoClose(true)" },
                { "trigger": "f:SetCtlColors()", "contents": "SetCtlColors(${1:hwnd}${2:, ${3:branding}}, ${4:text_color}, ${5:bg_color})" },
                { "trigger": "f:SetCurInstType()", "contents": "SetCurInstType(${1:inst_type_idx})" },
                { "trigger": "f:SetDetailsPrint()", "contents": "SetDetailsPrint(${1:value})" },
                { "trigger": "f:SetDetailsPrint(both)", "contents": "SetDetailsPrint(both)" },
                { "trigger": "f:SetDetailsPrint(lastused)", "contents": "SetDetailsPrint(lastused)" },
                { "trigger": "f:SetDetailsPrint(listonly)", "contents": "SetDetailsPrint(listonly)" },
                { "trigger": "f:SetDetailsPrint(none)", "contents": "SetDetailsPrint(none)" },
                { "trigger": "f:SetDetailsPrint(textonly)", "contents": "SetDetailsPrint(textonly)" },
                { "trigger": "f:SetDetailsView()", "contents": "SetDetailsView(${1:value})" },
                { "trigger": "f:SetDetailsView()", "contents": "SetDetailsView(${1:value})" },
                { "trigger": "f:SetDetailsView(hide)", "contents": "SetDetailsView(hide)" },
                { "trigger": "f:SetDetailsView(show)", "contents": "SetDetailsView(show)" },
                { "trigger": "f:SetErrorLevel()", "contents": "SetErrorLevel(${1:error_level})" },
                { "trigger": "f:SetErrorLevel(0)", "contents": "SetErrorLevel(0)" },
                { "trigger": "f:SetErrorLevel(1)", "contents": "SetErrorLevel(1)" },
                { "trigger": "f:SetErrorLevel(2)", "contents": "SetErrorLevel(2)" },
                { "trigger": "f:SetErrors()", "contents": "SetErrors()" },
                { "trigger": "f:SetFileAttributes()", "contents": "SetFileAttributes(\"${1:filename}\", ${2:attributes})" },
                { "trigger": "f:SetOutPath()", "contents": "SetOutPath(\"${1:path}\")" },
                { "trigger": "f:SetRebootFlag()", "contents": "SetRebootFlag(${1:value})" },
                { "trigger": "f:SetRebootFlag(false)", "contents": "SetRebootFlag(false)" },
                { "trigger": "f:SetRebootFlag(true)", "contents": "SetRebootFlag(true)" },
                { "trigger": "f:SetRegView()", "contents": "SetRegView(${1:value})" },
                { "trigger": "f:SetRegView(32)", "contents": "SetRegView(32)" },
                { "trigger": "f:SetRegView(64)", "contents": "SetRegView(64)" },
                { "trigger": "f:SetRegView(lastused)", "contents": "SetRegView(lastused)" },
                { "trigger": "f:SetShellVarContext()", "contents": "SetShellVarContext(${1:value})" },
                { "trigger": "f:SetShellVarContext(all)", "contents": "SetShellVarContext(all)" },
                { "trigger": "f:SetShellVarContext(current)", "contents": "SetShellVarContext(current)" },
                { "trigger": "f:SetSilent()", "contents": "SetSilent(${1:value})" },
                { "trigger": "f:SetSilent(normal)", "contents": "SetSilent(normal)" },
                { "trigger": "f:SetSilent(silent)", "contents": "SetSilent(silent)" },
                { "trigger": "f:ShowWindow()", "contents": "ShowWindow(${1:hwnd}, ${2:value})" },
                { "trigger": "f:Sleep()", "contents": "Sleep(${1:sleeptime_in_ms})" },
                { "trigger": "f:StrCpy()", "contents": "StrCpy(${1:str}${2:, ${3:maxlen}${4:, ${5:start_offset}}})" },
                { "trigger": "f:StrLen()", "contents": "StrLen(${1:str})" },
                { "trigger": "f:UnRegDLL()", "contents": "UnRegDLL(\"${1:dllfile}\")" },
                { "trigger": "f:WriteINIStr()", "contents": "WriteINIStr(\"${1:ini_filename}\", \"${2:section_name}\", \"${3:entry_name}\", \"${4:value}\")" },
                { "trigger": "f:WriteRegBin()", "contents": "WriteRegBin(\"${1:root_key}\", \"${2:subkey}\", \"${3:key_name}\", \"${4:value_data}\")" },
                { "trigger": "f:WriteRegDWORD()", "contents": "WriteRegDWORD(\"${1:root_key}\", \"${2:subkey}\", \"${3:key_name}\", \"${4:value}\")" },
                { "trigger": "f:WriteRegExpandStr()", "contents": "WriteRegExpandStr(\"${1:root_key}\", \"${2:subkey}\", \"${3:key_name}\", \"${4:value}\")" },
                { "trigger": "f:WriteRegStr()", "contents": "WriteRegStr(\"${1:root_key}\", \"${2:subkey}\", \"${3:key_name}\", \"${4:value}\")" },
                { "trigger": "f:WriteUninstaller()", "contents": "WriteUninstaller(\"${1:path}.exe\")" },

                 { "#": "BridleNSIS Constants" },
                 { "trigger": "${BRIDLE_NULL}", "contents": "\\${BRIDLE_NULL}" },
                
                { "#": "BridleNSIS Command Helpers" },
                { "trigger": "ICONEXCLAMATION", "contents": "ICONEXCLAMATION" },
                { "trigger": "ICONINFORMATION", "contents": "ICONINFORMATION" },
                { "trigger": "ICONQUESTION", "contents": "ICONQUESTION" },
                { "trigger": "ICONSTOP", "contents": "ICONSTOP" },
                { "trigger": "USERICON", "contents": "USERICON" },
                { "trigger": "TOPMOST", "contents": "TOPMOST" },
                { "trigger": "SETFOREGROUND", "contents": "SETFOREGROUND" },
                { "trigger": "RIGHT", "contents": "RIGHT" },
                { "trigger": "RTLREADING", "contents": "RTLREADING" },
                { "trigger": "DEFBUTTON1", "contents": "DEFBUTTON1" },
                { "trigger": "DEFBUTTON2", "contents": "DEFBUTTON2" },
                { "trigger": "DEFBUTTON3", "contents": "DEFBUTTON3" },
                { "trigger": "DEFBUTTON4", "contents": "DEFBUTTON4" },

                { "note": "It ain't over 'til the fat lady sings" }
        ]
}
